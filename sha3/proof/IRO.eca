(* infinite random oracle: it ranges over infinite length bitstrings,
   all of whose bits are sampled uniformly and independently. We
   obviously make it lazy. *)

require import Option Int Bool NewList NewFMap NewFSet.

type from.

module type IRO = {
  proc init() : unit

  (* f x, returning the first n bits of the result *)
  proc f(x : from, n : int) : bool list
}.

module IRO : IRO = {
  var mp : (from, bool list) fmap

  proc init() = { mp = map0; }

  proc choose(n) = {
    var b, bs;

    bs <- [];
    while (n > 0) {
      b  <$ Dbool.dbool;
      bs <- b :: bs;
      n  <- n - 1;
    }
    return bs;
  }

  proc f(x, n) = {
    var ys, zs;

    ys     <- odflt [] mp.[x];
    zs     <@ choose (max 0 (n - size ys));
    mp.[x] <- ys ++ zs;
    return take n (oget mp.[x]);
  }
}.
